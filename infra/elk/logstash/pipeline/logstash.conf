input {
  jdbc {
        jdbc_driver_library => "/usr/share/logstash/tools/mysql-connector-j-9.1.0.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://host.docker.internal:3306/tubelens?useSSL=false&serverTimezone=UTC"
        jdbc_user => "root"
        jdbc_password => "5609yang"
        statement => "SELECT * FROM trending_video WHERE updated_at > :sql_last_value"
        schedule => "*/1 * * * *" # 15분 마다 실행
        use_column_value => true
        tracking_column => "updated_at"
        tracking_column_type => "timestamp"
        # 초기 실행 시 모든 데이터 가져오기 (선택 사항)
        # record_last_run => true
        # last_run_metadata_path => "/usr/share/logstash/data/.logstash_jdbc_last_run"
  }
}

filter {
  # LLM 기반 제목 정제 (GPT-4o API 호출)
  http {
    url => "https://api.openai.com/v1/chat/completions"
    http_method => "post"
    headers => {
      "Content-Type" => "application/json"
      "Authorization" => "Bearer ${CHATGPT_API_KEY}"
    }
    body => '{ "model": "gpt-4o-mini", "messages": [ {"role": "user", "content": "다음 제목을 오타 제거, 불용어 제거, 핵심 키워드 추출하여 간결하게 만들어줘: %{[title]}" } ], "max_tokens": 100, "n": 1, "stop": null, "temperature": 0.7 }'
    target => "gpt_response" # API 응답 전체를 저장할 필드
    response_field => "[document][refined_title]" # 응답에서 추출할 제목 필드 (GPT 응답 구조에 따라 다름)
    # request_timeout => 60
    # persistent => true
    # retry_count => 3
    # retry_delay => 5
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "tubelens_videos-%{+YYYY.MM.dd}"
    doc_as_upsert => true
    document_id => "%{id}" # MySQL 테이블의 고유 ID 컬럼
  }
}