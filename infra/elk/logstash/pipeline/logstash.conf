input {
  jdbc {
        jdbc_driver_library => "/usr/share/logstash/tools/mysql-connector-j-9.1.0.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "jdbc:mysql://host.docker.internal:3306/tubelens?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true"
        jdbc_user => "root"
        statement => "SELECT * FROM trending_video WHERE updated_at > :sql_last_value"
        schedule => "*/1 * * * *" # 1분마다 실행
        use_column_value => true
        tracking_column => "updated_at"
        tracking_column_type => "timestamp"
        # 초기 실행 시 모든 데이터 가져오기 (선택 사항)
        # record_last_run => true
        # last_run_metadata_path => "/usr/share/logstash/data/.logstash_jdbc_last_run"
  }

  http_poller {
      urls => {
        refine_title => {
          method => "post"
          url => "http://python_api:8000/refine-title"
          body => '{"title": "%{title}"}'
          headers => {
            "Content-Type" => "application/json"
          }
        }
      }
      request_timeout => 60
      schedule => { "every" => "60 seconds" } # 1분마다 폴링
      codec => "json"
      target => "gpt_response"
  }
}

filter {
  if "_jsonparsefailure" in [tags] {
    mutate {
      remove_field => ["gpt_response"] # 파싱 실패한 필드 제거
    }
    # 또는 다른 방식으로 오류 처리 (예: Elasticsearch에 오류 로그로 저장)
  } else if [gpt_response] {
    json {
      source => "gpt_response"
      target => "refined_data"
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "tubelens_videos-%{+YYYY.MM.dd}"
    doc_as_upsert => true
    document_id => "%{id}" # MySQL 테이블의 고유 ID 컬럼
  }
}